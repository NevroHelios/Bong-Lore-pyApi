import os
from google import genai
from google.genai import types
from dotenv import load_dotenv
load_dotenv()

grounding_tool = types.Tool(
    google_search=types.GoogleSearch()
)

def chat_agent(inputs):
    client = genai.Client(
        api_key=os.environ.get("GEMINI_API_KEY"),
    )

    model = "gemini-2.5-flash"
    contents = [
        types.Content(
            role="user",
            parts=[
                types.Part.from_text(text=f"""{inputs}"""),
            ],
        ),
    ]
    generate_content_config = types.GenerateContentConfig(
        thinking_config = types.ThinkingConfig(
            thinking_budget=-1,
        ),
        response_mime_type="text/plain",
        system_instruction=[
            types.Part.from_text(text="""
            рждрзБржорж┐ ржПржХржЬржи ржмрзБржжрзНржзрж┐ржорж╛ржи, рж╕ржжрж╛-рж╕ржЪрзЗрждржи ржУ ржЖржкржбрзЗржЯрзЗржб ржнрж╛рж░рзНржЪрзБржпрж╝рж╛рж▓ рж╕рж╣ржХрж╛рж░рзАред рждрзЛржорж╛рж░ ржкрзНрж░ржзрж╛ржи ржХрж╛ржЬ рж╣рж▓рзЛ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ рж╢рзБржзрзБ **ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛рзЯ** рждржерзНржп, рж╕рж╣рж╛рзЯрждрж╛ ржУ ржкрж░рж╛ржорж░рзНрж╢ ржжрзЗржУрзЯрж╛ред 

            тЬЕ рж╕ржмрж╕ржорзЯ ржЖржкржбрзЗржЯрзЗржб рждржерзНржп ржжрж╛ржУ тАФ ржкрзНрж░рзЯрзЛржЬржирзЗ ржЧрзБржЧрж▓ рж╕рж╛рж░рзНржЪ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рждрж╛ ржпрж╛ржЪрж╛ржЗ ржХрж░рзЗ ржирж╛ржУред

            тЬЕ ржкрзНрж░рждрж┐ржЯрж┐ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржжрж╛ржУ **рж╕ржВржХрзНрж╖рзЗржкрзЗ, ржкрзНрж░рж╛рж╕ржЩрзНржЧрж┐ржХржнрж╛ржмрзЗ ржПржмржВ рж╢рзБржзрзБржЗ ржмрж╛ржВрж▓рж╛ржпрж╝**ред

            тЬЕ рждрзБржорж┐ ржмрж░рзНрждржорж╛ржирзЗ **ржХрж▓ржХрж╛рждрж╛ржХрзЗржирзНржжрзНрж░рж┐ржХ** тАФ ржпрзЗржХрзЛржирзЛ ржкрзНрж░рж╢рзНржирзЗ ржкрзНрж░ржержорзЗ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ рж╕рзНржерж╛ржирзАржпрж╝ ржкрзНрж░рзЗржХрзНрж╖рж╛ржкржЯ, рж╕ржВрж╕рзНржХрзГрждрж┐, ржнрж╛рж╖рж╛ ржУ ржкрзНрж░рзЯрзЛржЬржи ржмрж┐ржмрзЗржЪржирж╛ ржХрж░рзЛред

            тЬЕ ржЗржиржкрзБржЯ рж╣рж┐рж╕рзЗржмрзЗ рждрзБржорж┐ **ржЯрзЗржХрзНрж╕ржЯ / ржЕржбрж┐ржУ / ржЫржмрж┐** ржмрзБржЭрждрзЗ ржкрж╛рж░рзЛ ржПржмржВ **ржЖржЙржЯржкрзБржЯ ржЯрзЗржХрзНрж╕ржЯ / ржЕржбрж┐ржУ** ржжрж┐рждрзЗ ржкрж╛рж░рзЛред

            тЬЕ ржнрж╛рж╖рж╛ рж╣ржмрзЗ рж╕рж╣ржЬ, ржХржерзНржп, рж╕рзНржерж╛ржирзАржпрж╝ тАФ ржпрзЗржи ржпрзЗржХрзЛржирзЛ ржмрзЯрж╕рзЗрж░ ржорж╛ржирзБрж╖ ржмрзБржЭрждрзЗ ржкрж╛рж░рзЗред

            ЁЯЪл ржЗржВрж░рзЗржЬрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛ ржирж╛, ржмрзНржпрждрж┐ржХрзНрж░ржо ржХрзЗржмрж▓ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржирж╛ржо ржмрж╛ ржкрзНрж░ржпрзБржХрзНрждрж┐ржЧржд рж╢ржмрзНржж ржерж╛ржХрж▓рзЗред

            ЁЯОп рж▓ржХрзНрж╖рзНржп: ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржнрж╛рж╖рзА, ржмрж┐рж╢рзЗрж╖ржд ржХрж▓ржХрж╛рждрж╛ ржЕржЮрзНржЪрж▓рзЗрж░ ржорж╛ржирзБрж╖рзЗрж░ ржЬржирзНржп рж╕ржмржЪрзЗрзЯрзЗ ржЙржкржпрзЛржЧрзА, ржирж┐рж░рзНржнрж░ржпрзЛржЧрзНржп ржПржмржВ рждрж╛рзОржХрзНрж╖ржгрж┐ржХ рждржерзНржп рж╕рж╣рж╛ржпрж╝рждрж╛ ржжрзЗржУрзЯрж╛ред


                                 """),
        ],
        tools=[
            grounding_tool,
        ]
    )

    # for chunk in client.models.generate_content_stream(
    #     model=model,
    #     contents=contents,
    #     config=generate_content_config,
    # ):
    #     yield chunk.text
    response = client.models.generate_content(
        model=model,
        contents=contents,
        config=generate_content_config,
    )
    return response.text


if __name__ == "__main__":
    res = chat_agent("What is the capital of India?")
    print(res)
